; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	f:\MyD3D\MyD3D\d3dUtility\d3dUtility.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_PI	DD	04048f5c3r			; 3.14
$SG79552 DB	'Direct3DCreate9() - FAILED', 00H
	ORG $+1
$SG79562 DB	'CreateDevice() - FAILED', 00H
CONST	ENDS
PUBLIC	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
; File f:\myd3d\myd3d\d3dutility\d3dutility.cpp
_TEXT	SEGMENT
_color$ = -16						; size = 16
$T79776 = 8						; size = 4
_a$ = 12						; size = 16
?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z PROC ; MyD3D::xColorToValue

; 8    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 9    : 	D3DCOLORVALUE color;
; 10   : 
; 11   : 	color.a = a.a;		//Alpha值

	fld	DWORD PTR _a$[ebp+12]
	fstp	DWORD PTR _color$[ebp+12]

; 12   : 	color.b = a.b;		//蓝色值

	fld	DWORD PTR _a$[ebp+8]
	fstp	DWORD PTR _color$[ebp+8]

; 13   : 	color.g = a.g;		//绿色值

	fld	DWORD PTR _a$[ebp+4]
	fstp	DWORD PTR _color$[ebp+4]

; 14   : 	color.r = a.r;		//红色值

	fld	DWORD PTR _a$[ebp]
	fstp	DWORD PTR _color$[ebp]

; 15   : 
; 16   : 	return color;

	mov	eax, DWORD PTR $T79776[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _color$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _color$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _color$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T79776[ebp]

; 17   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ENDP ; MyD3D::xColorToValue
_TEXT	ENDS
PUBLIC	?InitD3D@MyD3D@@YA_NPAUHINSTANCE__@@PAUHWND__@@HH_NW4_D3DDEVTYPE@@PAPAUIDirect3DDevice9@@@Z ; MyD3D::InitD3D
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_Direct3DCreate9@4:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_d3dpp$ = -372						; size = 56
_hr$ = -316						; size = 4
_caps$ = -312						; size = 304
_vp$ = -8						; size = 4
_d3d9$ = -4						; size = 4
_hInstance$ = 8						; size = 4
_hwnd$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_windowed$ = 24						; size = 1
_deviceType$ = 28					; size = 4
_device$ = 32						; size = 4
?InitD3D@MyD3D@@YA_NPAUHINSTANCE__@@PAUHWND__@@HH_NW4_D3DDEVTYPE@@PAPAUIDirect3DDevice9@@@Z PROC ; MyD3D::InitD3D

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H

; 27   : 	HRESULT hr = 0;

	mov	DWORD PTR _hr$[ebp], 0

; 28   : 
; 29   : 	//Step 1: 要初始化IDirect3D，首先必须获取指向接口IDrect3D9的指针。使得一个专门的Direct3D函数可以很容易做到  
; 30   : 	IDirect3D9* d3d9 = 0;

	mov	DWORD PTR _d3d9$[ebp], 0

; 31   : 	d3d9 = Direct3DCreate9(D3D_SDK_VERSION);

	push	32					; 00000020H
	call	_Direct3DCreate9@4
	mov	DWORD PTR _d3d9$[ebp], eax

; 32   : 	if (!d3d9)

	cmp	DWORD PTR _d3d9$[ebp], 0
	jne	SHORT $LN5@InitD3D

; 33   : 	{
; 34   : 		::MessageBox(0,"Direct3DCreate9() - FAILED",0,0);

	push	0
	push	0
	push	OFFSET $SG79552
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 35   : 		return false;

	xor	al, al
	jmp	$LN6@InitD3D
$LN5@InitD3D:

; 36   : 	}
; 37   : 
; 38   : 	//Step 2: 检验图形卡是否支持该硬件顶点运算
; 39   : 	D3DCAPS9 caps;
; 40   : 	d3d9->GetDeviceCaps(D3DADAPTER_DEFAULT,deviceType,&caps);

	lea	eax, DWORD PTR _caps$[ebp]
	push	eax
	mov	ecx, DWORD PTR _deviceType$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _d3d9$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _d3d9$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 41   : 	int vp = 0;

	mov	DWORD PTR _vp$[ebp], 0

; 42   : 	if (caps.DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT)

	mov	eax, DWORD PTR _caps$[ebp+28]
	and	eax, 65536				; 00010000H
	je	SHORT $LN4@InitD3D

; 43   : 	{
; 44   : 		//硬件定点运算
; 45   : 		vp = D3DCREATE_HARDWARE_VERTEXPROCESSING;

	mov	DWORD PTR _vp$[ebp], 64			; 00000040H

; 46   : 	}
; 47   : 	else

	jmp	SHORT $LN3@InitD3D
$LN4@InitD3D:

; 48   : 	{
; 49   : 		//软件顶点运算
; 50   : 		vp = D3DCREATE_SOFTWARE_VERTEXPROCESSING;

	mov	DWORD PTR _vp$[ebp], 32			; 00000020H
$LN3@InitD3D:

; 51   : 	}
; 52   : 
; 53   : 	//Step 3: 填写 D3DPRESENT_PARAMETERS结构
; 54   : 	D3DPRESENT_PARAMETERS d3dpp;  
; 55   : 	d3dpp.BackBufferWidth            = width; //后台缓存中表面的宽度，单位为像素

	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _d3dpp$[ebp], ecx

; 56   : 	d3dpp.BackBufferHeight           = height;//后台缓存中表面的高度，单位为像素

	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _d3dpp$[ebp+4], edx

; 57   : 	d3dpp.BackBufferFormat           = D3DFMT_A8R8G8B8;//后台缓存的像素格式(如32位像素格式：D3DFMT_A8R8G8B8)  

	mov	DWORD PTR _d3dpp$[ebp+8], 21		; 00000015H

; 58   : 	d3dpp.BackBufferCount            = 1;     //所需使用的后台缓存的个数，通常是1，需要一个后台缓存  

	mov	DWORD PTR _d3dpp$[ebp+12], 1

; 59   : 	d3dpp.MultiSampleType            = D3DMULTISAMPLE_NONE; //后台缓存使用的多重采样类型  

	mov	DWORD PTR _d3dpp$[ebp+16], 0

; 60   : 	d3dpp.MultiSampleQuality         = 0;     //多重采样的质量水平  

	mov	DWORD PTR _d3dpp$[ebp+20], 0

; 61   : 	d3dpp.SwapEffect                 = D3DSWAPEFFECT_DISCARD; //枚举类型指定交换链中的缓存的页面设置方式。  

	mov	DWORD PTR _d3dpp$[ebp+24], 1

; 62   : 	d3dpp.hDeviceWindow              = hwnd;  //与设备相关的窗口句柄。指定了所有进行绘制的应用程序窗口  

	mov	eax, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR _d3dpp$[ebp+28], eax

; 63   : 	d3dpp.Windowed                   = windowed;//窗口模式  true为窗口 false为全屏

	movzx	ecx, BYTE PTR _windowed$[ebp]
	mov	DWORD PTR _d3dpp$[ebp+32], ecx

; 64   : 	d3dpp.EnableAutoDepthStencil     = true; //自动创建并维护深度缓存或模板缓存  

	mov	DWORD PTR _d3dpp$[ebp+36], 1

; 65   : 	d3dpp.AutoDepthStencilFormat     = D3DFMT_D24S8;//深度缓存或模板缓存的像素格式  

	mov	DWORD PTR _d3dpp$[ebp+40], 75		; 0000004bH

; 66   : 	d3dpp.Flags                      = 0;//附加特性 0表示无标记  

	mov	DWORD PTR _d3dpp$[ebp+44], 0

; 67   : 	d3dpp.FullScreen_RefreshRateInHz = D3DPRESENT_RATE_DEFAULT;	//刷新频率 当前表示默认频率

	mov	DWORD PTR _d3dpp$[ebp+48], 0

; 68   : 	/*D3DPRESENT集合的一个成员 合法时间间隔列表
; 69   : 	 D3DPRESENT_INTERVAL_IMMEDIATE 立即提交
; 70   : 	D3DPRESENT_INTERVAL_DEFAULT 由Direct3D来选择提交频率 */
; 71   : 	d3dpp.PresentationInterval       = D3DPRESENT_INTERVAL_IMMEDIATE;

	mov	DWORD PTR _d3dpp$[ebp+52], -2147483648	; 80000000H

; 72   : 	
; 73   : 	// Step 4: 利用已经初始化的D3DPRESENT_PARAMETERS结构创建IDrect3Device9(一个C++对象，代表我们用来显示3D图形的物理硬件设备)
; 74   : 	hr = d3d9->CreateDevice(
; 75   : 		D3DADAPTER_DEFAULT, // primary adapter默认显卡  
; 76   : 		deviceType,         // device type  
; 77   : 		hwnd,               // window associated with device  
; 78   : 		vp,                 // vertex processing  
; 79   : 		&d3dpp,             // present parameters  
; 80   : 		device);            // return created device  

	mov	edx, DWORD PTR _device$[ebp]
	push	edx
	lea	eax, DWORD PTR _d3dpp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _deviceType$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _d3d9$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _d3d9$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+64]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 81   : 
; 82   : 	if( FAILED(hr) )  

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@InitD3D

; 83   : 	{  
; 84   : 		// try again using a 16-bit depth buffer  
; 85   : 		d3dpp.AutoDepthStencilFormat = D3DFMT_D16;  

	mov	DWORD PTR _d3dpp$[ebp+40], 80		; 00000050H

; 86   : 
; 87   : 		hr = d3d9->CreateDevice(  
; 88   : 			D3DADAPTER_DEFAULT,  
; 89   : 			deviceType,  
; 90   : 			hwnd,  
; 91   : 			vp,  
; 92   : 			&d3dpp,  
; 93   : 			device);//返回创建的设备  

	mov	edx, DWORD PTR _device$[ebp]
	push	edx
	lea	eax, DWORD PTR _d3dpp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _deviceType$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _d3d9$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _d3d9$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+64]
	call	ecx
	mov	DWORD PTR _hr$[ebp], eax

; 94   : 
; 95   : 		if( FAILED(hr) )  

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@InitD3D

; 96   : 		{  
; 97   : 			d3d9->Release(); // done with d3d9 object  

	mov	edx, DWORD PTR _d3d9$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _d3d9$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx

; 98   : 			::MessageBox(0, "CreateDevice() - FAILED", 0, 0);  

	push	0
	push	0
	push	OFFSET $SG79562
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 99   : 			return false;  

	xor	al, al
	jmp	SHORT $LN6@InitD3D
$LN2@InitD3D:

; 100  : 		}  
; 101  : 	}  
; 102  : 
; 103  : 	d3d9->Release(); // done with d3d9 object  

	mov	eax, DWORD PTR _d3d9$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _d3d9$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax

; 104  : 
; 105  : 	return true;  

	mov	al, 1
$LN6@InitD3D:

; 106  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitD3D@MyD3D@@YA_NPAUHINSTANCE__@@PAUHWND__@@HH_NW4_D3DDEVTYPE@@PAPAUIDirect3DDevice9@@@Z ENDP ; MyD3D::InitD3D
_TEXT	ENDS
PUBLIC	__real@3f50624de0000000
PUBLIC	?EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z		; MyD3D::EnterMsgLoop
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ?lastTime@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4MA
_BSS	SEGMENT
?lastTime@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4MA DD 01H DUP (?) ; `MyD3D::EnterMsgLoop'::`2'::lastTime
_BSS	ENDS
;	COMDAT ?$S1@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4IA
_BSS	SEGMENT
?$S1@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4IA DD 01H DUP (?) ; `MyD3D::EnterMsgLoop'::`2'::$S1
_BSS	ENDS
;	COMDAT __real@3f50624de0000000
CONST	SEGMENT
__real@3f50624de0000000 DQ 03f50624de0000000r	; 0.001
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z$0
__ehfuncinfo$?EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
; Function compile flags: /Odtp
xdata$x	ENDS
_TEXT	SEGMENT
tv138 = -64						; size = 8
tv130 = -56						; size = 8
_timeDelta$79582 = -48					; size = 4
_currTime$79580 = -44					; size = 4
_msg$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
_ptr_display$ = 8					; size = 4
?EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z PROC			; MyD3D::EnterMsgLoop

; 110  : {  

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 111  : 	MSG msg;  
; 112  : 	::ZeroMemory(&msg, sizeof(MSG));  

	push	28					; 0000001cH
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 113  : 
; 114  : 	static float lastTime = (float)timeGetTime();   

	mov	ecx, DWORD PTR ?$S1@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4IA
	and	ecx, 1
	jne	SHORT $LN5@EnterMsgLo
	mov	edx, DWORD PTR ?$S1@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4IA
	or	edx, 1
	mov	DWORD PTR ?$S1@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4IA, edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	call	DWORD PTR __imp__timeGetTime@0
	mov	DWORD PTR tv130[ebp], eax
	mov	DWORD PTR tv130[ebp+4], 0
	fild	QWORD PTR tv130[ebp]
	fstp	DWORD PTR ?lastTime@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4MA
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN5@EnterMsgLo:

; 115  : 
; 116  : 	while(msg.message != WM_QUIT)  

	cmp	DWORD PTR _msg$[ebp+4], 18		; 00000012H
	je	SHORT $LN3@EnterMsgLo

; 117  : 	{  
; 118  : 		if(::PeekMessage(&msg, 0, 0, 0, PM_REMOVE))  

	push	1
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__PeekMessageA@20
	test	eax, eax
	je	SHORT $LN2@EnterMsgLo

; 119  : 		{  
; 120  : 			::TranslateMessage(&msg);  

	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	DWORD PTR __imp__TranslateMessage@4

; 121  : 			::DispatchMessage(&msg);  

	lea	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	DWORD PTR __imp__DispatchMessageA@4

; 122  : 		}  
; 123  : 		else  

	jmp	SHORT $LN1@EnterMsgLo
$LN2@EnterMsgLo:

; 124  : 		{     
; 125  : 			float currTime  = (float)timeGetTime();  

	call	DWORD PTR __imp__timeGetTime@0
	mov	DWORD PTR tv138[ebp], eax
	mov	DWORD PTR tv138[ebp+4], 0
	fild	QWORD PTR tv138[ebp]
	fstp	DWORD PTR _currTime$79580[ebp]

; 126  : 			float timeDelta = (currTime - lastTime)*0.001f;  

	fld	DWORD PTR _currTime$79580[ebp]
	fsub	DWORD PTR ?lastTime@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4MA
	fmul	QWORD PTR __real@3f50624de0000000
	fstp	DWORD PTR _timeDelta$79582[ebp]

; 127  : 			//计算相邻两次调用ptr_display的时间间隔  
; 128  : 			ptr_display(timeDelta);//调用ptr_display()函数  

	push	ecx
	fld	DWORD PTR _timeDelta$79582[ebp]
	fstp	DWORD PTR [esp]
	call	DWORD PTR _ptr_display$[ebp]
	add	esp, 4

; 129  : 
; 130  : 			lastTime = currTime;  

	fld	DWORD PTR _currTime$79580[ebp]
	fstp	DWORD PTR ?lastTime@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4MA
$LN1@EnterMsgLo:

; 131  : 		}  
; 132  : 	}  

	jmp	SHORT $LN5@EnterMsgLo
$LN3@EnterMsgLo:

; 133  : 	return msg.wParam;  

	mov	eax, DWORD PTR _msg$[ebp+8]

; 134  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z$0:
	mov	eax, DWORD PTR ?$S1@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S1@?1??EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z@4IA, eax
	ret	0
__ehhandler$?EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EnterMsgLoop@MyD3D@@YAHP6A_NM@Z@Z ENDP			; MyD3D::EnterMsgLoop
PUBLIC	?InitMtrl@MyD3D@@YA?AU_D3DMATERIAL9@@UD3DXCOLOR@@000M@Z ; MyD3D::InitMtrl
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T79801 = -200						; size = 16
$T79800 = -184						; size = 16
$T79799 = -168						; size = 16
$T79798 = -152						; size = 16
$T79797 = -136						; size = 16
$T79796 = -120						; size = 16
$T79795 = -104						; size = 16
$T79794 = -88						; size = 16
_mtrl$ = -72						; size = 68
$T79793 = 8						; size = 4
_a$ = 12						; size = 16
_d$ = 28						; size = 16
_s$ = 44						; size = 16
_e$ = 60						; size = 16
_p$ = 76						; size = 4
?InitMtrl@MyD3D@@YA?AU_D3DMATERIAL9@@UD3DXCOLOR@@000M@Z PROC ; MyD3D::InitMtrl

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	esi
	push	edi

; 139  : 	D3DMATERIAL9 mtrl;
; 140  : 	mtrl.Ambient = xColorToValue(a);

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _a$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _a$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR $T79795[ebp]
	push	eax
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79794[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79794[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79794[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T79794[ebp+12], edx
	mov	eax, DWORD PTR $T79794[ebp]
	mov	DWORD PTR _mtrl$[ebp+16], eax
	mov	ecx, DWORD PTR $T79794[ebp+4]
	mov	DWORD PTR _mtrl$[ebp+20], ecx
	mov	edx, DWORD PTR $T79794[ebp+8]
	mov	DWORD PTR _mtrl$[ebp+24], edx
	mov	eax, DWORD PTR $T79794[ebp+12]
	mov	DWORD PTR _mtrl$[ebp+28], eax

; 141  : 	mtrl.Diffuse = xColorToValue(d);

	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _d$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _d$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _d$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T79797[ebp]
	push	ecx
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79796[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79796[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79796[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR $T79796[ebp+12], eax
	mov	ecx, DWORD PTR $T79796[ebp]
	mov	DWORD PTR _mtrl$[ebp], ecx
	mov	edx, DWORD PTR $T79796[ebp+4]
	mov	DWORD PTR _mtrl$[ebp+4], edx
	mov	eax, DWORD PTR $T79796[ebp+8]
	mov	DWORD PTR _mtrl$[ebp+8], eax
	mov	ecx, DWORD PTR $T79796[ebp+12]
	mov	DWORD PTR _mtrl$[ebp+12], ecx

; 142  : 	mtrl.Specular = xColorToValue(s);

	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _s$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _s$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	lea	edx, DWORD PTR $T79799[ebp]
	push	edx
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79798[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79798[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79798[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T79798[ebp+12], edx
	mov	eax, DWORD PTR $T79798[ebp]
	mov	DWORD PTR _mtrl$[ebp+32], eax
	mov	ecx, DWORD PTR $T79798[ebp+4]
	mov	DWORD PTR _mtrl$[ebp+36], ecx
	mov	edx, DWORD PTR $T79798[ebp+8]
	mov	DWORD PTR _mtrl$[ebp+40], edx
	mov	eax, DWORD PTR $T79798[ebp+12]
	mov	DWORD PTR _mtrl$[ebp+44], eax

; 143  : 	mtrl.Emissive = xColorToValue(e);

	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _e$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _e$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _e$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T79801[ebp]
	push	ecx
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79800[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79800[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79800[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR $T79800[ebp+12], eax
	mov	ecx, DWORD PTR $T79800[ebp]
	mov	DWORD PTR _mtrl$[ebp+48], ecx
	mov	edx, DWORD PTR $T79800[ebp+4]
	mov	DWORD PTR _mtrl$[ebp+52], edx
	mov	eax, DWORD PTR $T79800[ebp+8]
	mov	DWORD PTR _mtrl$[ebp+56], eax
	mov	ecx, DWORD PTR $T79800[ebp+12]
	mov	DWORD PTR _mtrl$[ebp+60], ecx

; 144  : 	mtrl.Power = p;

	fld	DWORD PTR _p$[ebp]
	fstp	DWORD PTR _mtrl$[ebp+64]

; 145  : 
; 146  : 	return mtrl;

	mov	ecx, 17					; 00000011H
	lea	esi, DWORD PTR _mtrl$[ebp]
	mov	edi, DWORD PTR $T79793[ebp]
	rep movsd
	mov	eax, DWORD PTR $T79793[ebp]

; 147  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?InitMtrl@MyD3D@@YA?AU_D3DMATERIAL9@@UD3DXCOLOR@@000M@Z ENDP ; MyD3D::InitMtrl
_TEXT	ENDS
PUBLIC	__real@3f19999a
PUBLIC	??DD3DXCOLOR@@QBE?AU0@M@Z			; D3DXCOLOR::operator*
PUBLIC	__real@3ecccccd
PUBLIC	?InitDirectjonalLight@MyD3D@@YA?AU_D3DLIGHT9@@PAUD3DXVECTOR3@@PAUD3DXCOLOR@@@Z ; MyD3D::InitDirectjonalLight
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
$T79811 = -232						; size = 16
$T79810 = -216						; size = 16
$T79809 = -200						; size = 16
$T79808 = -184						; size = 16
$T79807 = -168						; size = 16
$T79806 = -152						; size = 16
$T79805 = -136						; size = 16
$T79804 = -120						; size = 16
_light$ = -104						; size = 104
$T79803 = 8						; size = 4
_direction$ = 12					; size = 4
_color$ = 16						; size = 4
?InitDirectjonalLight@MyD3D@@YA?AU_D3DLIGHT9@@PAUD3DXVECTOR3@@PAUD3DXCOLOR@@@Z PROC ; MyD3D::InitDirectjonalLight

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi

; 152  : 	D3DLIGHT9 light;
; 153  : 	::ZeroMemory(&light,sizeof(light));

	push	104					; 00000068H
	push	0
	lea	eax, DWORD PTR _light$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 154  : 
; 155  : 	light.Type			= D3DLIGHT_DIRECTIONAL;				//类型

	mov	DWORD PTR _light$[ebp], 3

; 156  : 	light.Ambient		= xColorToValue(*color * 0.4f);		//光源发出的环境光颜色

	push	ecx
	fld	DWORD PTR __real@3ecccccd
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T79805[ebp]
	push	ecx
	mov	ecx, DWORD PTR _color$[ebp]
	call	??DD3DXCOLOR@@QBE?AU0@M@Z		; D3DXCOLOR::operator*
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	lea	ecx, DWORD PTR $T79806[ebp]
	push	ecx
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79804[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79804[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79804[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR $T79804[ebp+12], eax
	mov	ecx, DWORD PTR $T79804[ebp]
	mov	DWORD PTR _light$[ebp+36], ecx
	mov	edx, DWORD PTR $T79804[ebp+4]
	mov	DWORD PTR _light$[ebp+40], edx
	mov	eax, DWORD PTR $T79804[ebp+8]
	mov	DWORD PTR _light$[ebp+44], eax
	mov	ecx, DWORD PTR $T79804[ebp+12]
	mov	DWORD PTR _light$[ebp+48], ecx

; 157  : 	light.Diffuse		= xColorToValue(*color);			//光源发出的漫射光颜色

	mov	edx, DWORD PTR _color$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR $T79808[ebp]
	push	eax
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79807[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79807[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79807[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T79807[ebp+12], edx
	mov	eax, DWORD PTR $T79807[ebp]
	mov	DWORD PTR _light$[ebp+4], eax
	mov	ecx, DWORD PTR $T79807[ebp+4]
	mov	DWORD PTR _light$[ebp+8], ecx
	mov	edx, DWORD PTR $T79807[ebp+8]
	mov	DWORD PTR _light$[ebp+12], edx
	mov	eax, DWORD PTR $T79807[ebp+12]
	mov	DWORD PTR _light$[ebp+16], eax

; 158  : 	light.Specular		= xColorToValue(*color * 0.6f);		//光源发出的镜面光颜色

	push	ecx
	fld	DWORD PTR __real@3f19999a
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T79810[ebp]
	push	ecx
	mov	ecx, DWORD PTR _color$[ebp]
	call	??DD3DXCOLOR@@QBE?AU0@M@Z		; D3DXCOLOR::operator*
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	lea	ecx, DWORD PTR $T79811[ebp]
	push	ecx
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79809[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79809[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79809[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR $T79809[ebp+12], eax
	mov	ecx, DWORD PTR $T79809[ebp]
	mov	DWORD PTR _light$[ebp+20], ecx
	mov	edx, DWORD PTR $T79809[ebp+4]
	mov	DWORD PTR _light$[ebp+24], edx
	mov	eax, DWORD PTR $T79809[ebp+8]
	mov	DWORD PTR _light$[ebp+28], eax
	mov	ecx, DWORD PTR $T79809[ebp+12]
	mov	DWORD PTR _light$[ebp+32], ecx

; 159  : 	light.Direction		= *direction;						//描述光在世界坐标系中传播方向的向量

	mov	edx, DWORD PTR _direction$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _light$[ebp+64], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _light$[ebp+68], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _light$[ebp+72], edx

; 160  : 
; 161  : 	return light;

	mov	ecx, 26					; 0000001aH
	lea	esi, DWORD PTR _light$[ebp]
	mov	edi, DWORD PTR $T79803[ebp]
	rep movsd
	mov	eax, DWORD PTR $T79803[ebp]

; 162  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?InitDirectjonalLight@MyD3D@@YA?AU_D3DLIGHT9@@PAUD3DXVECTOR3@@PAUD3DXCOLOR@@@Z ENDP ; MyD3D::InitDirectjonalLight
_TEXT	ENDS
PUBLIC	??0D3DXCOLOR@@QAE@MMMM@Z			; D3DXCOLOR::D3DXCOLOR
; Function compile flags: /Odtp
; File f:\myd3d\myd3d\sdk\dx9sdk\include\d3dx10math.inl
;	COMDAT ??DD3DXCOLOR@@QBE?AU0@M@Z
_TEXT	SEGMENT
tv95 = -20						; size = 4
tv93 = -16						; size = 4
tv91 = -12						; size = 4
tv89 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXCOLOR@@QBE?AU0@M@Z PROC				; D3DXCOLOR::operator*, COMDAT
; _this$ = ecx

; 1506 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1507 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _f$[ebp]
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR _f$[ebp]
	fstp	DWORD PTR tv91[ebp]
	fld	DWORD PTR tv91[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _f$[ebp]
	fstp	DWORD PTR tv93[ebp]
	fld	DWORD PTR tv93[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _f$[ebp]
	fstp	DWORD PTR tv95[ebp]
	fld	DWORD PTR tv95[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXCOLOR@@QAE@MMMM@Z		; D3DXCOLOR::D3DXCOLOR
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1508 : }

	mov	esp, ebp
	pop	ebp
	ret	8
??DD3DXCOLOR@@QBE?AU0@M@Z ENDP				; D3DXCOLOR::operator*
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
??0D3DXCOLOR@@QAE@MMMM@Z PROC				; D3DXCOLOR::D3DXCOLOR, COMDAT
; _this$ = ecx

; 1401 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1402 :     r = fr;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fr$[ebp]
	fstp	DWORD PTR [eax]

; 1403 :     g = fg;

	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fg$[ebp]
	fstp	DWORD PTR [ecx+4]

; 1404 :     b = fb;

	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fb$[ebp]
	fstp	DWORD PTR [edx+8]

; 1405 :     a = fa;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fa$[ebp]
	fstp	DWORD PTR [eax+12]

; 1406 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0D3DXCOLOR@@QAE@MMMM@Z ENDP				; D3DXCOLOR::D3DXCOLOR
_TEXT	ENDS
PUBLIC	__real@42c80000
PUBLIC	?InitPointLight@MyD3D@@YA?AU_D3DLIGHT9@@PAUD3DXVECTOR3@@PAUD3DXCOLOR@@@Z ; MyD3D::InitPointLight
;	COMDAT __real@42c80000
; File f:\myd3d\myd3d\d3dutility\d3dutility.cpp
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
$T79829 = -232						; size = 16
$T79828 = -216						; size = 16
$T79827 = -200						; size = 16
$T79826 = -184						; size = 16
$T79825 = -168						; size = 16
$T79824 = -152						; size = 16
$T79823 = -136						; size = 16
$T79822 = -120						; size = 16
_light$ = -104						; size = 104
$T79821 = 8						; size = 4
_position$ = 12						; size = 4
_color$ = 16						; size = 4
?InitPointLight@MyD3D@@YA?AU_D3DLIGHT9@@PAUD3DXVECTOR3@@PAUD3DXCOLOR@@@Z PROC ; MyD3D::InitPointLight

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi

; 167  : 	D3DLIGHT9 light;
; 168  : 	::ZeroMemory(&light,sizeof(light));

	push	104					; 00000068H
	push	0
	lea	eax, DWORD PTR _light$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 169  : 
; 170  : 	light.Type			= D3DLIGHT_POINT;					//类型

	mov	DWORD PTR _light$[ebp], 1

; 171  : 	light.Position		= *position;						//描述光源在世界坐标系中的位置的向量

	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _light$[ebp+52], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _light$[ebp+56], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _light$[ebp+60], ecx

; 172  : 	light.Ambient		= xColorToValue(*color * 0.4f);		//光源发出的环境光颜色

	push	ecx
	fld	DWORD PTR __real@3ecccccd
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T79823[ebp]
	push	edx
	mov	ecx, DWORD PTR _color$[ebp]
	call	??DD3DXCOLOR@@QBE?AU0@M@Z		; D3DXCOLOR::operator*
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T79824[ebp]
	push	ecx
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79822[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79822[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79822[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR $T79822[ebp+12], eax
	mov	ecx, DWORD PTR $T79822[ebp]
	mov	DWORD PTR _light$[ebp+36], ecx
	mov	edx, DWORD PTR $T79822[ebp+4]
	mov	DWORD PTR _light$[ebp+40], edx
	mov	eax, DWORD PTR $T79822[ebp+8]
	mov	DWORD PTR _light$[ebp+44], eax
	mov	ecx, DWORD PTR $T79822[ebp+12]
	mov	DWORD PTR _light$[ebp+48], ecx

; 173  : 	light.Diffuse		= xColorToValue(*color);			//光源发出的漫射光颜色

	mov	edx, DWORD PTR _color$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR $T79826[ebp]
	push	eax
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79825[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79825[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79825[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T79825[ebp+12], edx
	mov	eax, DWORD PTR $T79825[ebp]
	mov	DWORD PTR _light$[ebp+4], eax
	mov	ecx, DWORD PTR $T79825[ebp+4]
	mov	DWORD PTR _light$[ebp+8], ecx
	mov	edx, DWORD PTR $T79825[ebp+8]
	mov	DWORD PTR _light$[ebp+12], edx
	mov	eax, DWORD PTR $T79825[ebp+12]
	mov	DWORD PTR _light$[ebp+16], eax

; 174  : 	light.Specular		= xColorToValue(*color * 0.6f);		//光源发出的镜面光颜色

	push	ecx
	fld	DWORD PTR __real@3f19999a
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T79828[ebp]
	push	ecx
	mov	ecx, DWORD PTR _color$[ebp]
	call	??DD3DXCOLOR@@QBE?AU0@M@Z		; D3DXCOLOR::operator*
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	lea	ecx, DWORD PTR $T79829[ebp]
	push	ecx
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79827[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79827[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79827[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR $T79827[ebp+12], eax
	mov	ecx, DWORD PTR $T79827[ebp]
	mov	DWORD PTR _light$[ebp+20], ecx
	mov	edx, DWORD PTR $T79827[ebp+4]
	mov	DWORD PTR _light$[ebp+24], edx
	mov	eax, DWORD PTR $T79827[ebp+8]
	mov	DWORD PTR _light$[ebp+28], eax
	mov	ecx, DWORD PTR $T79827[ebp+12]
	mov	DWORD PTR _light$[ebp+32], ecx

; 175  : 	light.Range			= 100.0f;							//光线“消亡”前，所能达到的最大光程

	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _light$[ebp+76]

; 176  : 
; 177  : 	return light;

	mov	ecx, 26					; 0000001aH
	lea	esi, DWORD PTR _light$[ebp]
	mov	edi, DWORD PTR $T79821[ebp]
	rep movsd
	mov	eax, DWORD PTR $T79821[ebp]

; 178  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?InitPointLight@MyD3D@@YA?AU_D3DLIGHT9@@PAUD3DXVECTOR3@@PAUD3DXCOLOR@@@Z ENDP ; MyD3D::InitPointLight
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@3f800000
PUBLIC	?InitSpotLight@MyD3D@@YA?AU_D3DLIGHT9@@PAUD3DXVECTOR3@@0PAUD3DXCOLOR@@@Z ; MyD3D::InitSpotLight
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
$T79841 = -232						; size = 16
$T79840 = -216						; size = 16
$T79839 = -200						; size = 16
$T79838 = -184						; size = 16
$T79837 = -168						; size = 16
$T79836 = -152						; size = 16
$T79835 = -136						; size = 16
$T79834 = -120						; size = 16
_light$ = -104						; size = 104
$T79833 = 8						; size = 4
_position$ = 12						; size = 4
_direction$ = 16					; size = 4
_color$ = 20						; size = 4
?InitSpotLight@MyD3D@@YA?AU_D3DLIGHT9@@PAUD3DXVECTOR3@@0PAUD3DXCOLOR@@@Z PROC ; MyD3D::InitSpotLight

; 182  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi

; 183  : 	D3DLIGHT9 light;
; 184  : 	::ZeroMemory(&light,sizeof(light));

	push	104					; 00000068H
	push	0
	lea	eax, DWORD PTR _light$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 185  : 
; 186  : 	light.Type			= D3DLIGHT_SPOT;					//类型

	mov	DWORD PTR _light$[ebp], 2

; 187  : 	light.Position		= *position;						//描述光源在世界坐标系中的位置的向量

	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _light$[ebp+52], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _light$[ebp+56], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _light$[ebp+60], ecx

; 188  : 	light.Direction		= *direction;						//描述光在世界坐标系中传播方向的向量

	mov	edx, DWORD PTR _direction$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _light$[ebp+64], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _light$[ebp+68], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _light$[ebp+72], edx

; 189  : 	light.Ambient		= xColorToValue(*color * 0.4f);		//光源发出的环境光颜色

	push	ecx
	fld	DWORD PTR __real@3ecccccd
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T79835[ebp]
	push	eax
	mov	ecx, DWORD PTR _color$[ebp]
	call	??DD3DXCOLOR@@QBE?AU0@M@Z		; D3DXCOLOR::operator*
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T79836[ebp]
	push	ecx
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79834[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79834[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79834[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR $T79834[ebp+12], eax
	mov	ecx, DWORD PTR $T79834[ebp]
	mov	DWORD PTR _light$[ebp+36], ecx
	mov	edx, DWORD PTR $T79834[ebp+4]
	mov	DWORD PTR _light$[ebp+40], edx
	mov	eax, DWORD PTR $T79834[ebp+8]
	mov	DWORD PTR _light$[ebp+44], eax
	mov	ecx, DWORD PTR $T79834[ebp+12]
	mov	DWORD PTR _light$[ebp+48], ecx

; 190  : 	light.Diffuse		= xColorToValue(*color);			//光源发出的漫射光颜色

	mov	edx, DWORD PTR _color$[ebp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR $T79838[ebp]
	push	eax
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79837[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79837[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79837[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T79837[ebp+12], edx
	mov	eax, DWORD PTR $T79837[ebp]
	mov	DWORD PTR _light$[ebp+4], eax
	mov	ecx, DWORD PTR $T79837[ebp+4]
	mov	DWORD PTR _light$[ebp+8], ecx
	mov	edx, DWORD PTR $T79837[ebp+8]
	mov	DWORD PTR _light$[ebp+12], edx
	mov	eax, DWORD PTR $T79837[ebp+12]
	mov	DWORD PTR _light$[ebp+16], eax

; 191  : 	light.Specular		= xColorToValue(*color * 0.6f);		//光源发出的镜面光颜色

	push	ecx
	fld	DWORD PTR __real@3f19999a
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T79840[ebp]
	push	ecx
	mov	ecx, DWORD PTR _color$[ebp]
	call	??DD3DXCOLOR@@QBE?AU0@M@Z		; D3DXCOLOR::operator*
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	lea	ecx, DWORD PTR $T79841[ebp]
	push	ecx
	call	?xColorToValue@MyD3D@@YA?AU_D3DCOLORVALUE@@UD3DXCOLOR@@@Z ; MyD3D::xColorToValue
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79839[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79839[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T79839[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR $T79839[ebp+12], eax
	mov	ecx, DWORD PTR $T79839[ebp]
	mov	DWORD PTR _light$[ebp+20], ecx
	mov	edx, DWORD PTR $T79839[ebp+4]
	mov	DWORD PTR _light$[ebp+24], edx
	mov	eax, DWORD PTR $T79839[ebp+8]
	mov	DWORD PTR _light$[ebp+28], eax
	mov	ecx, DWORD PTR $T79839[ebp+12]
	mov	DWORD PTR _light$[ebp+32], ecx

; 192  : 	light.Range			= 100.0f;							//光线“消亡”前，所能达到的最大光程

	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _light$[ebp+76]

; 193  : 	light.Falloff		= 1.0f;								//光强从内锥形到外锥形的衰减方式

	fld1
	fstp	DWORD PTR _light$[ebp+80]

; 194  : 	light.Theta			= MyD3D::PI/3.0f;						//内锥形角度

	fld	DWORD PTR _PI
	fdiv	QWORD PTR __real@4008000000000000
	fstp	DWORD PTR _light$[ebp+96]

; 195  : 	light.Phi			= MyD3D::PI/2.0f;						//外锥形角度

	fld	DWORD PTR _PI
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _light$[ebp+100]

; 196  : 
; 197  : 	return light;

	mov	ecx, 26					; 0000001aH
	lea	esi, DWORD PTR _light$[ebp]
	mov	edi, DWORD PTR $T79833[ebp]
	rep movsd
	mov	eax, DWORD PTR $T79833[ebp]

; 198  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?InitSpotLight@MyD3D@@YA?AU_D3DLIGHT9@@PAUD3DXVECTOR3@@0PAUD3DXCOLOR@@@Z ENDP ; MyD3D::InitSpotLight
_TEXT	ENDS
PUBLIC	??0D3DXCOLOR@@QAE@I@Z				; D3DXCOLOR::D3DXCOLOR
; Function compile flags: /Odtp
; File f:\myd3d\myd3d\d3dutility\d3dutility.h
;	COMDAT ??__EWHITE@MyD3D@@YAXXZ
text$yc	SEGMENT
??__EWHITE@MyD3D@@YAXXZ PROC				; MyD3D::`dynamic initializer for 'WHITE'', COMDAT

; 139  : 	const D3DXCOLOR WHITE(D3DCOLOR_XRGB(255,255,255));	//白色

	push	ebp
	mov	ebp, esp
	push	-1
	mov	ecx, OFFSET _WHITE
	call	??0D3DXCOLOR@@QAE@I@Z			; D3DXCOLOR::D3DXCOLOR
	pop	ebp
	ret	0
??__EWHITE@MyD3D@@YAXXZ ENDP				; MyD3D::`dynamic initializer for 'WHITE''
text$yc	ENDS
PUBLIC	__real@3b808081
;	COMDAT __real@3b808081
; File f:\myd3d\myd3d\sdk\dx9sdk\include\d3dx10math.inl
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@I@Z
_TEXT	SEGMENT
tv145 = -24						; size = 4
tv140 = -20						; size = 4
tv136 = -16						; size = 4
tv131 = -12						; size = 4
_this$ = -8						; size = 4
_f$ = -4						; size = 4
_dw$ = 8						; size = 4
??0D3DXCOLOR@@QAE@I@Z PROC				; D3DXCOLOR::D3DXCOLOR, COMDAT
; _this$ = ecx

; 1366 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1367 :     CONST FLOAT f = 1.0f / 255.0f;

	fld	DWORD PTR __real@3b808081
	fstp	DWORD PTR _f$[ebp]

; 1368 :     r = f * (FLOAT) (unsigned char) (dw >> 16);

	mov	eax, DWORD PTR _dw$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, al
	mov	DWORD PTR tv131[ebp], ecx
	fild	DWORD PTR tv131[ebp]
	fmul	DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 1369 :     g = f * (FLOAT) (unsigned char) (dw >>  8);

	mov	eax, DWORD PTR _dw$[ebp]
	shr	eax, 8
	movzx	ecx, al
	mov	DWORD PTR tv136[ebp], ecx
	fild	DWORD PTR tv136[ebp]
	fmul	DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 1370 :     b = f * (FLOAT) (unsigned char) (dw >>  0);

	movzx	eax, BYTE PTR _dw$[ebp]
	mov	DWORD PTR tv140[ebp], eax
	fild	DWORD PTR tv140[ebp]
	fmul	DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 1371 :     a = f * (FLOAT) (unsigned char) (dw >> 24);

	mov	edx, DWORD PTR _dw$[ebp]
	shr	edx, 24					; 00000018H
	movzx	eax, dl
	mov	DWORD PTR tv145[ebp], eax
	fild	DWORD PTR tv145[ebp]
	fmul	DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 1372 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0D3DXCOLOR@@QAE@I@Z ENDP				; D3DXCOLOR::D3DXCOLOR
; Function compile flags: /Odtp
; File f:\myd3d\myd3d\d3dutility\d3dutility.h
_TEXT	ENDS
;	COMDAT ??__EBLACK@MyD3D@@YAXXZ
text$yc	SEGMENT
??__EBLACK@MyD3D@@YAXXZ PROC				; MyD3D::`dynamic initializer for 'BLACK'', COMDAT

; 140  : 	const D3DXCOLOR BLACK(D3DCOLOR_XRGB(0,0,0));		//黑色

	push	ebp
	mov	ebp, esp
	push	-16777216				; ff000000H
	mov	ecx, OFFSET _BLACK
	call	??0D3DXCOLOR@@QAE@I@Z			; D3DXCOLOR::D3DXCOLOR
	pop	ebp
	ret	0
??__EBLACK@MyD3D@@YAXXZ ENDP				; MyD3D::`dynamic initializer for 'BLACK''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__ERED@MyD3D@@YAXXZ
text$yc	SEGMENT
??__ERED@MyD3D@@YAXXZ PROC				; MyD3D::`dynamic initializer for 'RED'', COMDAT

; 141  : 	const D3DXCOLOR RED(D3DCOLOR_XRGB(255,0,0));		//红色

	push	ebp
	mov	ebp, esp
	push	-65536					; ffff0000H
	mov	ecx, OFFSET _RED
	call	??0D3DXCOLOR@@QAE@I@Z			; D3DXCOLOR::D3DXCOLOR
	pop	ebp
	ret	0
??__ERED@MyD3D@@YAXXZ ENDP				; MyD3D::`dynamic initializer for 'RED''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__EGREEN@MyD3D@@YAXXZ
text$yc	SEGMENT
??__EGREEN@MyD3D@@YAXXZ PROC				; MyD3D::`dynamic initializer for 'GREEN'', COMDAT

; 142  : 	const D3DXCOLOR GREEN(D3DCOLOR_XRGB(0,255,0));		//绿色

	push	ebp
	mov	ebp, esp
	push	-16711936				; ff00ff00H
	mov	ecx, OFFSET _GREEN
	call	??0D3DXCOLOR@@QAE@I@Z			; D3DXCOLOR::D3DXCOLOR
	pop	ebp
	ret	0
??__EGREEN@MyD3D@@YAXXZ ENDP				; MyD3D::`dynamic initializer for 'GREEN''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__EBLUE@MyD3D@@YAXXZ
text$yc	SEGMENT
??__EBLUE@MyD3D@@YAXXZ PROC				; MyD3D::`dynamic initializer for 'BLUE'', COMDAT

; 143  : 	const D3DXCOLOR BLUE(D3DCOLOR_XRGB(0,0,255));		//蓝色

	push	ebp
	mov	ebp, esp
	push	-16776961				; ff0000ffH
	mov	ecx, OFFSET _BLUE
	call	??0D3DXCOLOR@@QAE@I@Z			; D3DXCOLOR::D3DXCOLOR
	pop	ebp
	ret	0
??__EBLUE@MyD3D@@YAXXZ ENDP				; MyD3D::`dynamic initializer for 'BLUE''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__EYELLOW@MyD3D@@YAXXZ
text$yc	SEGMENT
??__EYELLOW@MyD3D@@YAXXZ PROC				; MyD3D::`dynamic initializer for 'YELLOW'', COMDAT

; 144  : 	const D3DXCOLOR YELLOW(D3DCOLOR_XRGB(255,255,0));	//黄色

	push	ebp
	mov	ebp, esp
	push	-256					; ffffff00H
	mov	ecx, OFFSET _YELLOW
	call	??0D3DXCOLOR@@QAE@I@Z			; D3DXCOLOR::D3DXCOLOR
	pop	ebp
	ret	0
??__EYELLOW@MyD3D@@YAXXZ ENDP				; MyD3D::`dynamic initializer for 'YELLOW''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__ECYAN@MyD3D@@YAXXZ
text$yc	SEGMENT
??__ECYAN@MyD3D@@YAXXZ PROC				; MyD3D::`dynamic initializer for 'CYAN'', COMDAT

; 145  : 	const D3DXCOLOR CYAN(D3DCOLOR_XRGB(0,255,255));		//蓝绿色

	push	ebp
	mov	ebp, esp
	push	-16711681				; ff00ffffH
	mov	ecx, OFFSET _CYAN
	call	??0D3DXCOLOR@@QAE@I@Z			; D3DXCOLOR::D3DXCOLOR
	pop	ebp
	ret	0
??__ECYAN@MyD3D@@YAXXZ ENDP				; MyD3D::`dynamic initializer for 'CYAN''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__EMAGENTA@MyD3D@@YAXXZ
text$yc	SEGMENT
??__EMAGENTA@MyD3D@@YAXXZ PROC				; MyD3D::`dynamic initializer for 'MAGENTA'', COMDAT

; 146  : 	const D3DXCOLOR MAGENTA(D3DCOLOR_XRGB(255,0,255));	//洋红

	push	ebp
	mov	ebp, esp
	push	-65281					; ffff00ffH
	mov	ecx, OFFSET _MAGENTA
	call	??0D3DXCOLOR@@QAE@I@Z			; D3DXCOLOR::D3DXCOLOR
	pop	ebp
	ret	0
??__EMAGENTA@MyD3D@@YAXXZ ENDP				; MyD3D::`dynamic initializer for 'MAGENTA''
text$yc	ENDS
PUBLIC	__real@41000000
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??__EWHITE_MTRL@MyD3D@@YAXXZ
text$yc	SEGMENT
$T79870 = -144						; size = 68
$T79869 = -68						; size = 68
??__EWHITE_MTRL@MyD3D@@YAXXZ PROC			; MyD3D::`dynamic initializer for 'WHITE_MTRL'', COMDAT

; 149  : 	const D3DMATERIAL9 WHITE_MTRL		= InitMtrl(WHITE,WHITE,WHITE,BLACK,8.0f);		//白色材质

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	esi
	push	edi
	push	ecx
	fld	DWORD PTR __real@41000000
	fstp	DWORD PTR [esp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _BLACK
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _BLACK+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _BLACK+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _BLACK+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _WHITE
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _WHITE+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _WHITE+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _WHITE+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _WHITE
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _WHITE+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _WHITE+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _WHITE+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _WHITE
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _WHITE+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _WHITE+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _WHITE+12
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR $T79870[ebp]
	push	eax
	call	?InitMtrl@MyD3D@@YA?AU_D3DMATERIAL9@@UD3DXCOLOR@@000M@Z ; MyD3D::InitMtrl
	add	esp, 72					; 00000048H
	mov	ecx, 17					; 00000011H
	mov	esi, eax
	lea	edi, DWORD PTR $T79869[ebp]
	rep movsd
	mov	ecx, 17					; 00000011H
	lea	esi, DWORD PTR $T79869[ebp]
	mov	edi, OFFSET _WHITE_MTRL
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??__EWHITE_MTRL@MyD3D@@YAXXZ ENDP			; MyD3D::`dynamic initializer for 'WHITE_MTRL''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__ERED_MTRL@MyD3D@@YAXXZ
text$yc	SEGMENT
$T79876 = -144						; size = 68
$T79875 = -68						; size = 68
??__ERED_MTRL@MyD3D@@YAXXZ PROC				; MyD3D::`dynamic initializer for 'RED_MTRL'', COMDAT

; 150  : 	const D3DMATERIAL9 RED_MTRL			= InitMtrl(RED,RED,RED,BLACK,8.0f);				//红色材质

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	esi
	push	edi
	push	ecx
	fld	DWORD PTR __real@41000000
	fstp	DWORD PTR [esp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _BLACK
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _BLACK+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _BLACK+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _BLACK+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _RED
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _RED+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _RED+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _RED+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _RED
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _RED+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _RED+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _RED+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _RED
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _RED+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _RED+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _RED+12
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR $T79876[ebp]
	push	eax
	call	?InitMtrl@MyD3D@@YA?AU_D3DMATERIAL9@@UD3DXCOLOR@@000M@Z ; MyD3D::InitMtrl
	add	esp, 72					; 00000048H
	mov	ecx, 17					; 00000011H
	mov	esi, eax
	lea	edi, DWORD PTR $T79875[ebp]
	rep movsd
	mov	ecx, 17					; 00000011H
	lea	esi, DWORD PTR $T79875[ebp]
	mov	edi, OFFSET _RED_MTRL
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??__ERED_MTRL@MyD3D@@YAXXZ ENDP				; MyD3D::`dynamic initializer for 'RED_MTRL''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__EGREEN_MTRL@MyD3D@@YAXXZ
text$yc	SEGMENT
$T79880 = -144						; size = 68
$T79879 = -68						; size = 68
??__EGREEN_MTRL@MyD3D@@YAXXZ PROC			; MyD3D::`dynamic initializer for 'GREEN_MTRL'', COMDAT

; 151  : 	const D3DMATERIAL9 GREEN_MTRL		= InitMtrl(GREEN,GREEN,GREEN,BLACK,8.0f);		//绿色材质

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	esi
	push	edi
	push	ecx
	fld	DWORD PTR __real@41000000
	fstp	DWORD PTR [esp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _BLACK
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _BLACK+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _BLACK+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _BLACK+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _GREEN
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _GREEN+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _GREEN+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _GREEN+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _GREEN
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _GREEN+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _GREEN+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _GREEN+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _GREEN
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _GREEN+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _GREEN+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _GREEN+12
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR $T79880[ebp]
	push	eax
	call	?InitMtrl@MyD3D@@YA?AU_D3DMATERIAL9@@UD3DXCOLOR@@000M@Z ; MyD3D::InitMtrl
	add	esp, 72					; 00000048H
	mov	ecx, 17					; 00000011H
	mov	esi, eax
	lea	edi, DWORD PTR $T79879[ebp]
	rep movsd
	mov	ecx, 17					; 00000011H
	lea	esi, DWORD PTR $T79879[ebp]
	mov	edi, OFFSET _GREEN_MTRL
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??__EGREEN_MTRL@MyD3D@@YAXXZ ENDP			; MyD3D::`dynamic initializer for 'GREEN_MTRL''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__EBLUE_MTRL@MyD3D@@YAXXZ
text$yc	SEGMENT
$T79884 = -144						; size = 68
$T79883 = -68						; size = 68
??__EBLUE_MTRL@MyD3D@@YAXXZ PROC			; MyD3D::`dynamic initializer for 'BLUE_MTRL'', COMDAT

; 152  : 	const D3DMATERIAL9 BLUE_MTRL		= InitMtrl(BLUE,BLUE,BLUE,BLACK,8.0f);			//蓝色材质

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	esi
	push	edi
	push	ecx
	fld	DWORD PTR __real@41000000
	fstp	DWORD PTR [esp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _BLACK
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _BLACK+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _BLACK+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _BLACK+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _BLUE
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _BLUE+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _BLUE+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _BLUE+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _BLUE
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _BLUE+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _BLUE+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _BLUE+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _BLUE
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _BLUE+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _BLUE+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _BLUE+12
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR $T79884[ebp]
	push	eax
	call	?InitMtrl@MyD3D@@YA?AU_D3DMATERIAL9@@UD3DXCOLOR@@000M@Z ; MyD3D::InitMtrl
	add	esp, 72					; 00000048H
	mov	ecx, 17					; 00000011H
	mov	esi, eax
	lea	edi, DWORD PTR $T79883[ebp]
	rep movsd
	mov	ecx, 17					; 00000011H
	lea	esi, DWORD PTR $T79883[ebp]
	mov	edi, OFFSET _BLUE_MTRL
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??__EBLUE_MTRL@MyD3D@@YAXXZ ENDP			; MyD3D::`dynamic initializer for 'BLUE_MTRL''
; Function compile flags: /Odtp
text$yc	ENDS
;	COMDAT ??__EYELLOW_MTRL@MyD3D@@YAXXZ
text$yc	SEGMENT
$T79888 = -144						; size = 68
$T79887 = -68						; size = 68
??__EYELLOW_MTRL@MyD3D@@YAXXZ PROC			; MyD3D::`dynamic initializer for 'YELLOW_MTRL'', COMDAT

; 153  : 	const D3DMATERIAL9 YELLOW_MTRL		= InitMtrl(YELLOW,YELLOW,YELLOW,BLACK,8.0f);	//黄色材质

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	esi
	push	edi
	push	ecx
	fld	DWORD PTR __real@41000000
	fstp	DWORD PTR [esp]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _BLACK
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _BLACK+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _BLACK+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _BLACK+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _YELLOW
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _YELLOW+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _YELLOW+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _YELLOW+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _YELLOW
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _YELLOW+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _YELLOW+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _YELLOW+12
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _YELLOW
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _YELLOW+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _YELLOW+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _YELLOW+12
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR $T79888[ebp]
	push	eax
	call	?InitMtrl@MyD3D@@YA?AU_D3DMATERIAL9@@UD3DXCOLOR@@000M@Z ; MyD3D::InitMtrl
	add	esp, 72					; 00000048H
	mov	ecx, 17					; 00000011H
	mov	esi, eax
	lea	edi, DWORD PTR $T79887[ebp]
	rep movsd
	mov	ecx, 17					; 00000011H
	lea	esi, DWORD PTR $T79887[ebp]
	mov	edi, OFFSET _YELLOW_MTRL
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??__EYELLOW_MTRL@MyD3D@@YAXXZ ENDP			; MyD3D::`dynamic initializer for 'YELLOW_MTRL''
text$yc	ENDS
_BSS	SEGMENT
_WHITE_MTRL DB	044H DUP (?)
_GREEN	DB	010H DUP (?)
_YELLOW_MTRL DB	044H DUP (?)
_WHITE	DB	010H DUP (?)
_BLACK	DB	010H DUP (?)
_MAGENTA DB	010H DUP (?)
_GREEN_MTRL DB	044H DUP (?)
_BLUE	DB	010H DUP (?)
_YELLOW	DB	010H DUP (?)
_BLUE_MTRL DB	044H DUP (?)
_CYAN	DB	010H DUP (?)
_RED	DB	010H DUP (?)
_RED_MTRL DB	044H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_WHITE$initializer$ DD FLAT:??__EWHITE@MyD3D@@YAXXZ
_BLACK$initializer$ DD FLAT:??__EBLACK@MyD3D@@YAXXZ
_RED$initializer$ DD FLAT:??__ERED@MyD3D@@YAXXZ
_GREEN$initializer$ DD FLAT:??__EGREEN@MyD3D@@YAXXZ
_BLUE$initializer$ DD FLAT:??__EBLUE@MyD3D@@YAXXZ
_YELLOW$initializer$ DD FLAT:??__EYELLOW@MyD3D@@YAXXZ
_CYAN$initializer$ DD FLAT:??__ECYAN@MyD3D@@YAXXZ
_MAGENTA$initializer$ DD FLAT:??__EMAGENTA@MyD3D@@YAXXZ
_WHITE_MTRL$initializer$ DD FLAT:??__EWHITE_MTRL@MyD3D@@YAXXZ
_RED_MTRL$initializer$ DD FLAT:??__ERED_MTRL@MyD3D@@YAXXZ
_GREEN_MTRL$initializer$ DD FLAT:??__EGREEN_MTRL@MyD3D@@YAXXZ
_BLUE_MTRL$initializer$ DD FLAT:??__EBLUE_MTRL@MyD3D@@YAXXZ
_YELLOW_MTRL$initializer$ DD FLAT:??__EYELLOW_MTRL@MyD3D@@YAXXZ
CRT$XCU	ENDS
END
